import numpy as np

# Defines the function we want to calculate y-value for.
def f(x):
    return np.log(x)

n = 101
y = np.zeros(n)                 # Creates the array with zeroes
x = np.zeros(n)
increment = (10-1)/(n-1)        # How much x needs to increase to have 101 values between [1,10].

# By using a for loop, and indexing fills the arrays with x- and y-values.
for i in range(0, n):
    y[i] = f(1 + i*increment)
    x[i] = 1 + i*increment

# Uses a for loop with zip to print out the x-values, and the corresponding y-value
for x,y in zip(x, y):
    print(x,y)


"""
terminal > python fill_log_loop.py
1.0 0.0
1.09 0.08617769624105241
1.18 0.16551443847757333
1.27 0.23901690047049992
1.3599999999999999 0.30748469974796055
1.45 0.371563556432483
1.54 0.43178241642553783
1.63 0.4885800148186709
1.72 0.5423242908253617
1.81 0.5933268452777344
1.9 0.6418538861723947
1.99 0.688134638736401
2.08 0.7323678937132266
2.17 0.7747271675523681
2.26 0.8153648132841944
2.3499999999999996 0.8544153281560675
2.44 0.8919980393051105
2.5300000000000002 0.928219302739429
2.62 0.9631743177730056
2.71 0.9969486348916096
2.8 1.0296194171811581
2.8899999999999997 1.0612565021243408
2.98 1.091923300517313
3.07 1.1216775615991057
3.16 1.1505720275988207
3.25 1.1786549963416462
3.34 1.205970806988609
3.4299999999999997 1.2325602611778486
3.52 1.2584609896100056
3.61 1.2837077723447896
3.6999999999999997 1.3083328196501787
3.79 1.332366019094335
3.88 1.355835153635182
3.9699999999999998 1.378766094699099
4.0600000000000005 1.4011829736136414
4.15 1.423108334242607
4.24 1.4445632692438664
4.33 1.4655675420143985
4.42 1.4861396960896067
4.51 1.506297153514587
4.6 1.5260563034950492
4.6899999999999995 1.5454325824581878
4.779999999999999 1.5644405465033644
4.869999999999999 1.5830939370944983
4.96 1.601405740736836
5.05 1.6193882432872684
5.14 1.6370530794670737
5.2299999999999995 1.6544112780768314
5.32 1.6714733033535532
5.41 1.6882490928583902
5.5 1.7047480922384253
5.59 1.7209792871670078
5.68 1.7369512327330598
5.77 1.7526720805200082
5.859999999999999 1.7681496035889213
5.95 1.7833912195575383
6.04 1.7984040119467235
6.13 1.81319474994812
6.22 1.827769906751088
6.31 1.8421356765531218
6.3999999999999995 1.856297990365626
6.49 1.8702625307159986
6.58 1.884034745337226
6.67 1.8976198599275322
6.76 1.9110228900548727
6.85 1.9242486522741338
6.9399999999999995 1.937301774518713
7.029999999999999 1.9501867058225735
7.12 1.9629077254238845
7.21 1.9754689512968577
7.3 1.9878743481543455
7.39 2.0001277349601105
7.4799999999999995 2.012232791986386
7.569999999999999 2.024193067449357
7.66 2.0360119837525
7.75 2.0476928433652555
7.84 2.0592388343623163
7.93 2.0706530356467567
8.02 2.081938421878423
8.11 2.0930978681273213
8.2 2.1041341542702074
8.29 2.1150499691472033
8.379999999999999 2.1258479144939915
8.469999999999999 2.136530508663963
8.559999999999999 2.1471001901536506
8.649999999999999 2.157559320943788
8.739999999999998 2.167910189667444
8.83 2.178155014615869
8.92 2.188295946591918
9.01 2.1983350716202463
9.1 2.2082744135228043
9.19 2.2181159363675955
9.28 2.2278615467981093
9.37 2.2375130962503307
9.459999999999999 2.2470723830637866
9.549999999999999 2.2565411544926386
9.64 2.265921108622454
9.73 2.2752138961979136
9.82 2.2844211223663744
9.91 2.2935443483418965
10.0 2.302585092994046
"""
